"use client";

import { useState, useEffect } from "react";
import { useQuery } from "@apollo/client/react";
import { BookmarkedWhatToDiscardProblemsDocument } from "@/src/generated/graphql";
import { VStack, Text, Button, Box } from "@chakra-ui/react";
import ProblemCard from "@/src/app/what-to-discard-problems/components/ProblemCard";
import { WhatToDiscardProblem } from "@/src/generated/graphql";
import SessionContextProvider from "@/src/app/what-to-discard-problems/context-providers/SessionContextProvider";
import ProblemsContextProvider from "@/src/app/what-to-discard-problems/context-providers/ProblemsContextProvider";
import { useGraphQLSession } from "@/src/contexts/SessionProvider";

export default function BookmarkedProblemsSection() {
  const { session } = useGraphQLSession();
  const [problems, setProblems] = useState<WhatToDiscardProblem[]>([]);
  const [graphqlProblems, setGraphqlProblems] = useState<any[]>([]);
  const [hasMore, setHasMore] = useState(false);

  // Convert GraphQL session to REST format for SessionContextProvider
  const restSession = session
    ? {
        is_logged_in: session.isLoggedIn,
        user_id: session.userId,
        user: session.user
          ? {
              id: Number(session.user.id),
              name: session.user.name,
              avatar_url: session.user.avatarUrl,
            }
          : null,
      }
    : null;

  const { data, loading, error, fetchMore } = useQuery(BookmarkedWhatToDiscardProblemsDocument, {
    variables: { limit: 10 },
  });

  useEffect(() => {
    if (!data?.bookmarkedWhatToDiscardProblems) {
      return;
    }

    const edges = data.bookmarkedWhatToDiscardProblems.edges;
    const pageInfo = data.bookmarkedWhatToDiscardProblems.pageInfo;

    // GraphQLの型をそのまま使用
    const mappedProblems = edges.map((edge: any) => edge.node);
    setProblems(mappedProblems);
    setGraphqlProblems(edges.map(edge => edge.node));
    setHasMore(pageInfo.hasNextPage);
  }, [data]);

  const handleLoadMore = async () => {
    if (!data?.bookmarkedWhatToDiscardProblems?.pageInfo?.endCursor) return;

    const { data: moreData } = await fetchMore({
      variables: {
        cursor: data.bookmarkedWhatToDiscardProblems.pageInfo.endCursor,
        limit: 10,
      },
    });

    if (moreData?.bookmarkedWhatToDiscardProblems) {
      const edges = moreData.bookmarkedWhatToDiscardProblems.edges;
      const pageInfo = moreData.bookmarkedWhatToDiscardProblems.pageInfo;

      const newProblems = edges.map((edge: any) => edge.node);
      setProblems(prev => [...prev, ...newProblems]);
      setGraphqlProblems(prev => [...prev, ...edges.map(edge => edge.node)]);
      setHasMore(pageInfo.hasNextPage);
    }
  };

  if (loading && problems.length === 0) {
    return <Text>読み込み中...</Text>;
  }

  if (error) {
    return <Text color="red.500">エラーが発生しました: {error.message}</Text>;
  }

  if (problems.length === 0) {
    return (
      <Box textAlign="center" py={10}>
        <Text color="gray.500" fontSize="lg">
          ブックマークした問題はありません
        </Text>
        <Text color="gray.400" mt={2}>
          問題をブックマークすると、ここに表示されます
        </Text>
      </Box>
    );
  }

  return (
    <ProblemsContextProvider initialProblems={problems}>
      <SessionContextProvider session={restSession}>
        <VStack spacing={6} w="full">
          {problems.map((problem, index) => {
            const graphqlProblem = graphqlProblems[index];
            return (
              <ProblemCard key={problem.id} problem={problem} graphqlProblem={graphqlProblem} />
            );
          })}

          {hasMore && (
            <Button
              onClick={handleLoadMore}
              isLoading={loading}
              loadingText="読み込み中..."
              size="lg"
              variant="outline"
              colorScheme="blue">
              もっと見る
            </Button>
          )}
        </VStack>
      </SessionContextProvider>
    </ProblemsContextProvider>
  );
}
