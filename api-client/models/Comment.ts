/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    id: number;
    /**
     * 
     * @type {User}
     * @memberof Comment
     */
    user: User;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    parentCommentId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    repliesCount: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    commentableType: string;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    commentableId: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    updatedAt: string;
}

/**
 * Check if a given object implements the Comment interface.
 */
export function instanceOfComment(value: object): value is Comment {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('repliesCount' in value) || value['repliesCount'] === undefined) return false;
    if (!('commentableType' in value) || value['commentableType'] === undefined) return false;
    if (!('commentableId' in value) || value['commentableId'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function CommentFromJSON(json: any): Comment {
    return CommentFromJSONTyped(json, false);
}

export function CommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Comment {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user': UserFromJSON(json['user']),
        'parentCommentId': json['parent_comment_id'] == null ? undefined : json['parent_comment_id'],
        'repliesCount': json['replies_count'],
        'commentableType': json['commentable_type'],
        'commentableId': json['commentable_id'],
        'content': json['content'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
    };
}

export function CommentToJSON(json: any): Comment {
    return CommentToJSONTyped(json, false);
}

export function CommentToJSONTyped(value?: Comment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'user': UserToJSON(value['user']),
        'parent_comment_id': value['parentCommentId'],
        'replies_count': value['repliesCount'],
        'commentable_type': value['commentableType'],
        'commentable_id': value['commentableId'],
        'content': value['content'],
        'created_at': value['createdAt'],
        'updated_at': value['updatedAt'],
    };
}

