/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetReplies200Response,
} from '../models/index';
import {
    GetReplies200ResponseFromJSON,
    GetReplies200ResponseToJSON,
} from '../models/index';

export interface GetRepliesRequest {
    whatToDiscardProblemId: string;
    commentId: string;
}

/**
 * 
 */
export class WhatToDiscardProblemCommentReplyApi extends runtime.BaseAPI {

    /**
     * list replies
     */
    async getRepliesRaw(requestParameters: GetRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReplies200Response>> {
        if (requestParameters['whatToDiscardProblemId'] == null) {
            throw new runtime.RequiredError(
                'whatToDiscardProblemId',
                'Required parameter "whatToDiscardProblemId" was null or undefined when calling getReplies().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling getReplies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/what_to_discard_problems/{what_to_discard_problem_id}/comments/{comment_id}/replies`.replace(`{${"what_to_discard_problem_id"}}`, encodeURIComponent(String(requestParameters['whatToDiscardProblemId']))).replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReplies200ResponseFromJSON(jsonValue));
    }

    /**
     * list replies
     */
    async getReplies(requestParameters: GetRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReplies200Response> {
        const response = await this.getRepliesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
